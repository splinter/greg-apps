<%
	
	var server = request.getParameter('server');
	var service = request.getParameter('service');
	var operation = request.getParameter('opr');
	var time = request.getParameter('t');
	var result;
	var _reqCount = null;
	var _reqLevelSlaMap = null;
	var _respCount = null;
	var _faultCount = null;
	var __time = "time";
    	var __reqCount = "total_request_count";
	var __respCount = "total_response_count";
	var __faultCount = "total_fault_count";
	var timeGroup = null;
	var len;
	var jqPlotXaxisLbl = null;
	var jqPlotAxisFormatString = null;
	var _tickInterval = null;
	var dataTable = null;
	var orderByQuery = null;
	var selectQuery = null;
	var timeBetweenQuery;
	
	 
	function getCurrentDay(t){
		var date;
		var currentDate = new Date();
		var h= currentDate.getHours();
		var m= currentDate.getMinutes();
		var s= currentDate.getSeconds();
		var d = currentDate.getDate();
		var M = currentDate.getMonth()+1;
		var y = currentDate.getFullYear();
		h = formatTimeChunk(h); 
		m = formatTimeChunk(m);
		s = formatTimeChunk(s);	
		d = formatTimeChunk(d);	
		M = formatTimeChunk(M);
		if(t=="year"){
			date = y+"-"+M;
			}
		else if(t=="month"){
			date = y+"-"+M+"-"+d;		
		}
		else{
			date = y+"-"+M+"-"+d+" "+h+":"+m+":"+s;
		}
		return date;
	};
	function setFromdate(t){
		var _fromDate;
		var date = new Date();
		if(t=="year"){
			date.setMonth(date.getMonth()-60);//60months backward
			var y = date.getFullYear();
			var M = date.getMonth()+1;
			M = formatTimeChunk(M);
			_fromDate = y+"-"+M;
		}
		else if(t=="month"){
			date.setDate(date.getDate()-30);//30days backward
			var y = date.getFullYear();
			var M = date.getMonth()+1;
			var d = date.getDate();	
			d = formatTimeChunk(d);	
			M = formatTimeChunk(M);
			_fromDate = y+"-"+M+"-"+d;
		}
		else if(t=="day"){
			date.setHours(date.getHours()-24);//24hours backward
			var y = date.getFullYear();
			var M = date.getMonth()+1;
			var d = date.getDate();
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();
			h = formatTimeChunk(h);
			m = formatTimeChunk(m);
			s = formatTimeChunk(s);	
			d = formatTimeChunk(d);	
			M = formatTimeChunk(M);
			_fromDate = y+"-"+M+"-"+d+" "+h+":"+m+":"+s;
		}
		else{
			date.setMinutes(date.getMinutes()-60);//60min
			var y = date.getFullYear();
			var M = date.getMonth()+1;
			var d = date.getDate();
			var h = date.getHours();
			var m = date.getMinutes();
			var s = date.getSeconds();
			h = formatTimeChunk(h);
			m = formatTimeChunk(m);
			s = formatTimeChunk(s);	
			d = formatTimeChunk(d);	
			M = formatTimeChunk(M);
			_fromDate = y+"-"+M+"-"+d+" "+h+":"+m+":"+s;
		}
		return _fromDate;
	};
	if(time){
		if(time.toLowerCase() == "now"){
			dataTable = "AS_STATS_SUMMARY_PER_MINUTE";
			timeGroup = "minute";
			orderByQuery = "group by minute,hour,year,month,day,time order by year DESC ,month DESC,day DESC,hour DESC,minute DESC";
			selectQuery = "time, sum(total_request_count) as total_request_count,sum(total_response_count) as total_response_count,sum(total_fault_count) as total_fault_count";
			jqPlotXaxisLbl = "Minute";
			jqPlotAxisFormatString = "%b-%d %H:%M";
			_tickInterval = "5 minute";

			
			var toDate = getCurrentDay("now");
			var fromDate = setFromdate("now");
			//timeBetweenQuery = "time between '" + fromDate + "' and '" + toDate +"'";
			timeBetweenQuery = "time between '" + fromDate + "' and '" + toDate + "'";
			
		}
		else if(time.toLowerCase() == "day"){
			dataTable = "AS_STATS_SUMMARY_PER_HOUR";
			timeGroup = "hour";
			orderByQuery = "group by hour,year,month,day,time order by year DESC ,month DESC,day DESC,hour DESC";
			selectQuery = "time, sum(total_request_count) as total_request_count,sum(total_response_count) as total_response_count,sum(total_fault_count) as total_fault_count";
			jqPlotXaxisLbl = "Hour";
			jqPlotAxisFormatString = "%b-%d %H:00";
			_tickInterval = "1 hour";
			

			var toDate = getCurrentDay("day");
			var fromDate = setFromdate("day");
			timeBetweenQuery = "time between '" + fromDate + "' and '" + toDate + "'";
		}
		else if(time.toLowerCase() == "month"){
			dataTable = "AS_STATS_SUMMARY_PER_DAY";
			timeGroup = "day";
			orderByQuery = "group by year,month,day,time order by year DESC ,month DESC,day DESC";
			selectQuery = "time, sum(total_request_count) as total_request_count,sum(total_response_count) as total_response_count,sum(total_fault_count) as total_fault_count";

			jqPlotXaxisLbl = "Day";
			jqPlotAxisFormatString = "%b-%d";
			_tickInterval = "2 day";


			var toDate = getCurrentDay("month");
			var fromDate = setFromdate("month");
			timeBetweenQuery = "time between '" + fromDate + "' and '" + toDate + "'";

		}
		else if(time.toLowerCase() == "all"){
			dataTable = "AS_STATS_SUMMARY_PER_MONTH";
			timeGroup = "month";
			orderByQuery = "group by year,month,time order by year DESC ,month DESC";
			selectQuery = "time, sum(total_request_count) as total_request_count,sum(total_response_count) as total_response_count,sum(total_fault_count) as total_fault_count";

			jqPlotXaxisLbl = "Month";
			jqPlotAxisFormatString = "%Y-%b";
			_tickInterval = "1 month";


			var toDate = getCurrentDay("year");
			var fromDate = setFromdate("year");
			timeBetweenQuery = "time between '" + fromDate + "' and '" + toDate + "'";
		}
		else{
			new Log().info("cannot select table");
		}
	}
	if(dataTable){
		if(operation!=undefined && operation!="" && operation!=null){			
			queryDataOperationLvl();
		}
		else if(service!=undefined && service!="" && service!=null){
			queryDataServiceLvl();
			var reqCountArtifact = getSlaArtifact(service);
			var _reqLevelSlaMap = getSlaLevelMap(reqCountArtifact, "requestCountLevels");
		}
		else if(server!=undefined && server!="" && server!=null){
			queryDataServerLvl();	
		}
		else{
			queryDataAllServers();	
		}
	}
	function formatDateString(param){
		var params = param || {};
    		var year = param.year || "";
    		var month = param.month || "";
    		var day = param.day || "01";
    		var hour = param.hour || "00";
		var min = param.min || "00";
		var formatedAxisData = year+"-"+month+"-"+day+" "+hour+":"+min+":00";
		return formatedAxisData;
	}

	function convertDBResult(result, colx, coly) {
				var array = [];
				colx = colx.toLowerCase();
				coly = coly.toLowerCase();
				var colxUpperCase = colx.toUpperCase();
				var colyUpperCase = coly.toUpperCase(); 
				if(result){for (var i = 0; i < result.length; i++) {
					if(result[i][colx] != null && result[i][coly] != null){
						array.push([result[i][colx],parseFloat(result[i][coly])]);
					}
					else if(result[i][colxUpperCase] != null && result[i][colyUpperCase]  != null){
						array.push([result[i][colxUpperCase],parseFloat(result[i][colyUpperCase])]);					
					}
					else{
						array = null;					
					}
				}}
				return array;
       	};
	function QueryResults(q){
		var db = new Database("WSO2BAM_DATASOURCE");
		var result;
		try{
			result = db.query(q);
		}
		catch(e){
			print("<span style='color:#fff;font-weight:100;font-size:16px;'>No data available. Please visit our <a href='http://docs.wso2.org/wiki/display/BAM240/Service+Statistics+Toolbox' target='_blank' style='color:#FFFE89'>docs</a> to see how to configure AS monitoring</span><br /><span style='color:#eee;font-size:11px;'> <b>Reason : </b>" + e +"</span>");
		}
		finally{
			db.close();
		}
		return result;
	}
	function queryDataAllServers(){
			_reqCount = null;
			_respCount = null;
			_faultCount = null;
			var query = "select "+selectQuery+" from "+dataTable+" where " + timeBetweenQuery + " "+orderByQuery+"";
			var result = QueryResults(query);
			_reqCount = convertDBResult(result,__time,__reqCount);
			_respCount = convertDBResult(result,__time,__respCount);
			_faultCount = convertDBResult(result,__time,__faultCount);
			if(_reqCount){			
			len = _reqCount.length-1;
			}
	};
	
	function queryDataServerLvl(){
			_reqCount = null;
			_respCount = null;
			_faultCount = null;
			var query = "select "+selectQuery+" from "+dataTable+"  where " + timeBetweenQuery + " and host='"+server+"' "+orderByQuery+"";
			var result = QueryResults(query);
			_reqCount = convertDBResult(result,__time,__reqCount);
			_respCount = convertDBResult(result,__time,__respCount);
			_faultCount = convertDBResult(result,__time,__faultCount);
			if(_reqCount){			
				len = _reqCount.length-1;
			}

	};
	function queryDataServiceLvl(){			
			_reqCount = null;
			_respCount = null;
			_faultCount = null;

			var query = "select "+selectQuery+" from "+dataTable+" where " + timeBetweenQuery + " and host='"+server+"' and service_name='"+service+"' "+orderByQuery+"";
			var result = QueryResults(query);
			_reqCount = convertDBResult(result,__time,__reqCount);
			_respCount = convertDBResult(result,__time,__respCount);
			_faultCount = convertDBResult(result,__time,__faultCount);
			if(_reqCount){			
			len = _reqCount.length-1;
			}
	};
	function queryDataOperationLvl(){
		
			_reqCount = null;
			_respCount = null;
			_faultCount = null;
			
			var query = "select "+selectQuery+" from "+dataTable+" where " + timeBetweenQuery + " and host='"+server+"' and service_name='"+service+"' and operation_name='"+operation+"' "+orderByQuery+"";
			var result = QueryResults(query);
			_reqCount = convertDBResult(result,__time,__reqCount);
			_respCount = convertDBResult(result,__time,__respCount);
			_faultCount = convertDBResult(result,__time,__faultCount);
			if(_reqCount){			
			len = _reqCount.length-1;
			}
		
	};
	function formatTimeChunk(t){
		if (t<10){
  			t="0" + t;
		}
		return t;
	}
	
	function ech(t) {
		return t;	
	}

        function getSlaArtifact(service) {
		var carbon = require('carbon');
		var server = new carbon.server.Server(null);
		var options = {username: 'admin',  domain: 'carbon.super' , tenantId: -1234};
		var registry = new carbon.registry.Registry(server, options);
		var path = '/_system/governance/slas/' + service;
		var bol = registry.exists(path);
		if (bol) {
			var genericArtifactManager = new Packages.org.wso2.carbon.governance.api.generic.GenericArtifactManager(registry, "sla");
			var artifact = genericArtifactManager.getAllGenericArtifacts()[0];
			return artifact;
		}
		return null;
	}

	function getAttributeValue(asset, key) {
	    	var attributes = asset.getAttributes(key);
		if (!attributes || attributes.length == 0) {
		    return "";
		} else if (attributes.length == 1) {
		    return attributes[0] + "";
		}
		var output = [];
		for (i = 0; i < attributes.length; i++) {
			output.push(attributes[i]);
		}
    	return output;
	}

	function getSlaLevelMap(artifact, parameter){
		var nameAttribute = parameter + "_name";
		var minAttribute = parameter + "_min";
		var maxAttribute = parameter + "_max";
		var noOfReqCountLevels = getAttributeValue(artifact,nameAttribute).length;
		var slaLevelMap = {};
		var levelNames = getAttributeValue(artifact, nameAttribute);
		var minValues = getAttributeValue(artifact, minAttribute);
		var maxValues = getAttributeValue(artifact, maxAttribute);
		for (i = 0; i < noOfReqCountLevels; i++) {
			var minMax = [];
			minMax.push(levelNames[i]);
			minMax.push(minValues[i]);
			minMax.push(maxValues[i]);
			slaLevelMap[i] = minMax;
		}
		return slaLevelMap;
	}

%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<link rel="stylesheet" type="text/css" href="../../resources/js/vendor/jqPlot/jquery.jqplot.min.css" />
    <style type="text/css">
        .jqplot-target {
                    margin: 20px;
                    height: 380px;
                    width: 80%;
                    color:#fff;
                }

                .ui-widget-content {
                    background: rgb(57,57,57);
                }

                table.jqplot-table-legend {
                    border: 0px;
                    background-color: rgba(100,100,100, 0.0);
                    width:20%;
                    color: #fff;
                }

                .jqplot-highlighter-tooltip {
                    background-color: rgba(57,57,57, 0.9);
                    padding: 7px;
                    color: #fff;
                }
body{
font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
}

    </style>
</head>
<body>
<div id="errorInfo"></div>
<%
if(_reqCount){
	if(typeof _reqCount[0] !== 'undefined' && _reqCount[0] !== null){
%>
<div class="ui-widget ui-corner-all">
        <div class="ui-widget-content ui-corner-bottom" >
            <div id="dashboard-multiline-gadget"></div>
        </div>
    </div>
<%
}}
%>


<script type="text/javascript" src="../../resources/js/vendor/jquery-1.7.2.min.js"></script>
<script type="text/javascript" src="../../resources/js/vendor/jqPlot/jquery.jqplot.min.js"></script>
<script class="include" type="text/javascript" src="../../resources/js/vendor/jqPlot/plugins/jqplot.dateAxisRenderer.min.js"></script>
<script class="include" type="text/javascript" src="../../resources/js/vendor/jqPlot/plugins/jqplot.logAxisRenderer.min.js"></script>
<script class="include" type="text/javascript" src="../../resources/js/vendor/jqPlot/plugins/jqplot.canvasTextRenderer.min.js"></script>
<script class="include" type="text/javascript" src="../../resources/js/vendor/jqPlot/plugins/jqplot.canvasAxisTickRenderer.min.js"></script>
<script class="include" type="text/javascript" src="../../resources/js/vendor/jqPlot/plugins/jqplot.highlighter.min.js"></script>
<script class="include" type="text/javascript" src="../../resources/js/vendor/jqPlot/plugins/jqplot.cursor.min.js"></script>
<script class="include" type="text/javascript" src="../../resources/js/vendor/jqPlot/plugins/jqplot.enhancedLegendRenderer.js"></script>
<script type="text/javascript" src="../../resources/js/date.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
            $.jqplot._noToImageButton = true;
            var reqCount = <%=_reqCount%>;

            var respCount = <%=_respCount%>;
	
	    var faultCount = <%=_faultCount%>;

	    var slaMinMaxMap = <%=_reqLevelSlaMap%>;

	    
	    var axisXTicks = [];

	var yMax = 0;
	var maxValue = Math.max(Math.max.apply(Math,reqCount.map(function(o){return o[1];})),Math.max.apply(Math,respCount.map(function(o){return o[1];})),Math.max.apply(Math,faultCount.map(function(o){return o[1];})));

	if(isFinite(maxValue)){
		for(var i = 100; i < 1000000000 ; i){
			if(maxValue<i){
				var y = i/10;
				maxValue = Math.ceil(maxValue/y)*y;
				break;
			}
			i = i*10;
		}
		yMax = maxValue;
	}
	
	var lblXaxis = "<%=jqPlotXaxisLbl%>";

	var _timeGroup = "<%=time.toLowerCase()%>";
	
	var graphMaxValue;
	var graphMinValue;
	if(typeof reqCount[0] !== 'undefined' && reqCount[0] !== null){
		for(var i=0;i<reqCount.length;i++){
			axisXTicks.push(reqCount[i][0]);
		}
		//console.info(reqCount);
		graphMinValue = ""+reqCount[reqCount.length-1][0]+"";
		if(reqCount.length==0){
			graphMinValue = ""+reqCount[0][0]+"";	
		}
		graphMaxValue = ""+reqCount[0][0]+"";
		if(_timeGroup == "now"){
			graphMaxValue = Date.parse(graphMaxValue, "yyyy-MM-dd HH:mm:ss").add({ minutes: 1 });
			graphMinValue = Date.parse(graphMinValue, "yyyy-MM-dd HH:mm:ss").add({ minutes: -1 });
		}
		if(_timeGroup == "day"){
			graphMaxValue = Date.parse(graphMaxValue, "yyyy-MM-dd HH:mm:ss").add({ hours: 1 });
			graphMinValue = Date.parse(graphMinValue, "yyyy-MM-dd HH:mm:ss").add({ hours: -1 });
		}
		if(_timeGroup == "month"){
			graphMaxValue = Date.parse(graphMaxValue, "yyyy-MM-dd").add({ days: 1 });
			graphMinValue = Date.parse(graphMinValue, "yyyy-MM-dd").add({ days: -1 });
		}
		if(_timeGroup == "all"){
			graphMaxValue = Date.parse(graphMaxValue, "yyyy-MM").add({ months: 1 });
			graphMinValue = Date.parse(graphMinValue, "yyyy-MM").add({ months: -1 });
		}

		var slaNames = [];		
		var slaMinValues = [];		
		var slaMaxValues = [];
		
		for (var key in slaMinMaxMap) {
  			var minMaxLevel = [];
			var index = key;
			minMaxLevel = slaMinMaxMap[index];
			slaNames.push(minMaxLevel[0]);
			slaMinValues.push(minMaxLevel[1]);
			slaMaxValues.push(minMaxLevel[2]);
		}


		
		var lineDataWithSLA = [];
		lineDataWithSLA = [reqCount, respCount, faultCount];
		var arrayLength = slaMaxValues.length;
		for (var i = 0; i < arrayLength; i++) {
		      var lineStart = [graphMaxValue,slaMaxValues[i]];
		      var lineEnd = [graphMinValue,slaMaxValues[i]];
		      var sla = [lineStart,lineEnd];
		      lineDataWithSLA.push(sla);
		}


		var labelsWithSLA = [];
		labelsWithSLA = [{label: 'Total Request Count',markerOptions: { size: 10,style:'filledCircle'}}, {label: 'Total Response Count',markerOptions: { size: 10,style:'filledCircle'}}, 
			{label: 'Total Fault Count',markerOptions: { size: 10,style:'filledCircle'}}];
		
		for (var i = 0; i < arrayLength; i++) {
		      labelsWithSLA.push({show: true, label: slaNames[i] , showLabel: true, fill: true, fillToZero : true, fillToValue : slaMinValues[i], fillAlpha: 0.3});
		}		
		

		var labelColorsWithSLA = [];
		labelColorsWithSLA = ["#81B2FF", "#D2FF95","#FB8383"];
		
		for (var i = 0; i < arrayLength; i++) {
			var diff = yMax - slaMaxValues[i];
			var factor = diff/yMax;
			var perc = factor * 100;
			var red = {r:255, g:0, b:0};
			var white = {r:255, g:255, b:255};
			var colorGen = makeGradientColor(red, white, perc);
			//alert(colorGen.cssColor);
			labelColorsWithSLA.push(colorGen.cssColor);
		}

		var xaxisLblFormat = "<%=jqPlotAxisFormatString%>";
		var jqtickInterval = "<%=_tickInterval%>";
            	var plot1 = $.jqplot("dashboard-multiline-gadget", lineDataWithSLA, {
                seriesColors: labelColorsWithSLA,
                title: 'Req. Count / Resp. Count / Fault Count / SLA',
                highlighter: {
                    show: true,
                    sizeAdjust: 1,
                    tooltipOffset: 9,
			tooltipLocation: 'ne'
                },
                grid: {
                    background: 'rgba(57,57,57,0.0)',
                    drawBorder: false,
                    shadow: false,
                    gridLineColor: '#666666',
                    gridLineWidth: 2
                },
                legend: {
		    renderer: $.jqplot.EnhancedLegendRenderer,
                    show: true,
preDraw: true,
		    placement: 'outside'
                },
		
		
               seriesDefaults: {
		    rendererOptions: {
                        animation: {
                            show: true
                        }
                    },
                    showMarker: true
                },

                series: labelsWithSLA,

                axesDefaults: {
                    rendererOptions: {
                        baselineWidth: 1.5,
                        baselineColor: '#FFFFFF',
                        drawBaseline: false
                    }
                },
                axes: {
                    xaxis: {
			label:lblXaxis,
                        renderer:jQuery.jqplot.DateAxisRenderer,
			tickRenderer: $.jqplot.CanvasAxisTickRenderer,
			min:graphMinValue,
			max:graphMaxValue,
			drawMajorGridlines: true,
			//ticks:axisXTicks,
			tickInterval: jqtickInterval,
                        tickOptions:{formatString:xaxisLblFormat,angle: -60,textColor: '#ffffff'}
                    },
                    yaxis: {
                        min:0,
			max:yMax,
			numberTicks:6,	
                        tickOptions: {
                            showMark: true,formatString:'%d'
                        }
                    }
                },
		cursor: {
            		show: true,
            		zoom: true
            		//showTooltip: false
        	}
            });

	}
	else{
	$("#errorInfo").html("<span style='color:#fff;font-weight:100;font-size:16px;'>No data available. Please visit our <a href='http://docs.wso2.org/wiki/display/BAM240/Service+Statistics+Toolbox' target='_blank' style='color:#FFFE89'>docs</a> to see how to configure AS monitoring</span>")
	}
	

              $('.jqplot-highlighter-tooltip').addClass('ui-corner-all')
        });

//color gradient function

function makeGradientColor(color1, color2, percent) {
    var newColor = {};

    function makeChannel(a, b) {
        return(a + Math.round((b-a)*(percent/100)));
    }

    function makeColorPiece(num) {
        num = Math.min(num, 255);   // not more than 255
        num = Math.max(num, 0);     // not less than 0
        var str = num.toString(16);
        if (str.length < 2) {
            str = "0" + str;
        }
        return(str);
    }

    newColor.r = makeChannel(color1.r, color2.r);
    newColor.g = makeChannel(color1.g, color2.g);
    newColor.b = makeChannel(color1.b, color2.b);
    newColor.cssColor = "#" + 
                        makeColorPiece(newColor.r) + 
                        makeColorPiece(newColor.g) + 
                        makeColorPiece(newColor.b);
    return(newColor);
}

    </script>
</body>
</html>
